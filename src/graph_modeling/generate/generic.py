# Copyright 2021 The Geometric Graph Embedding Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import networkx as nx

__all__ = [
    "convert_to_outtree",
    "remove_self_loops",
]


def convert_to_outtree(tree: nx.Graph) -> nx.DiGraph:
    """
    the graph generated by networkx.random_tree() is undirected.
    means that parent -> children and children -> parent both exist
    This function change the graph to only parent -> children

    :param tree:
    :return:
    """
    digraph = nx.DiGraph(tree)
    for u, v in nx.bfs_tree(tree, 0).edges():
        digraph.remove_edge(v, u)
    return digraph


def remove_self_loops(G):
    # TODO: G.remove_edges_from(nx.selfloop_edges(G)) ?
    for e in list(G.edges()):
        if e[0] == e[1]:
            G.remove_edge(e[0], e[1])
    return G
